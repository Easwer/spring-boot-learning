openapi: 3.0.0
info:
  description: Spring Boot Application APIs Creation
  version: "1.0"
  title: Spring Boot Application APIs
  contact:
    name: Easwer AP
    email: easwerms@gmail.com
  license:
    name: Apache 2.0
servers:
  - url: https://localhost:8083
    description: The production API server
tags:
  - name: Security
    description: Security APIs
  - name: User
    description: User APIs
  - name: Group
    description: Group APIs
  - name: Auditlog
    description: Auditlog APIs
  - name: System
    description: System APIs
paths:
  /login:
    post:
      tags:
        - Security
      summary: To create new login session.
      description: To create new login session.
      operationId: login
      requestBody:
        description: Contains the creadentials to authenticate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
          application/xml:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        "200":
          description: User Logged in Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
            application/xml:
              schema:
                $ref: "#/components/schemas/Response"
        '400':
          description: Request Failed
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /logout:
    get:
      tags:
        - Security
      summary: Terminate user session.
      description: Terminate user session.
      operationId: logout
      parameters:
        - in: header
          name: authToken
          example: 824ae010-4502-b281-3231-122e3a54c198
          description: Authentication Key for Authentication and Authorization. this
            Authentication key obtained using Login API
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User session terminated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
            application/xml:
              schema:
                $ref: "#/components/schemas/Response"
        '400':
          description: Request Failed
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /isValid:
    get:
      tags:
        - Security
      summary: Check whether the current session is still active.
      description: Check whether the current session is still active.
      operationId: isValidToken
      parameters:
        - in: header
          name: authToken
          example: 824ae010-4502-b281-3231-122e3a54c198
          description: Authentication Key for Authentication and Authorization. this
            Authentication key obtained using Login API
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Session is active.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
            application/xml:
              schema:
                $ref: "#/components/schemas/Response"
        '400':
          description: Request Failed
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /status:
    get:
      tags:
        - Security
      summary: Get server running status.
      description: Get server running status.
      operationId: getServerStatus
      parameters:
        - in: header
          name: authToken
          example: 824ae010-4502-b281-3231-122e3a54c198
          description: Authentication Key for Authentication and Authorization. this
            Authentication key obtained using Login API
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Server is alive.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
            application/xml:
              schema:
                $ref: "#/components/schemas/Response"
        '400':
          description: Request Failed
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /settings:
    get:
      tags:
        - System
      summary: Get global settings.
      description: Get global settings.
      operationId: getGlobalSettings
      parameters:
        - in: header
          name: authToken
          example: 824ae010-4502-b281-3231-122e3a54c198
          description: Authentication Key for Authentication and Authorization. this
            Authentication key obtained using Login API
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: key
          example: isPasswordRequired
          description: Key for which the settings needs to be retrived.
          required: false
          schema:
            type: string
        - in: query
          name: module
          example: USER
          description: Module for which the settings needs to be retrived.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Global setting(s) is retrived successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
            application/xml:
              schema:
                $ref: "#/components/schemas/Response"
        '400':
          description: Request Failed
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /user:
    get:
      tags:
        - User
      summary: View security users.
      description: View an Security User
      operationId: getUsers
      parameters:
        - in: header
          name: authToken
          example: 824ae010-4502-b281-3231-122e3a54c198
          description: Authentication Key for Authentication and Authorization. this
            Authentication key obtained using Login API
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: userId
          example: 824ae010-4502-b281-3231-122e3a54c198
          description: Id of the user to fetch.
          required: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User(s) retrived successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
            application/xml:
              schema:
                $ref: "#/components/schemas/Response"
        "400":
          description: Request Failed
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    post:
      tags:
        - User
      summary: Create security users.
      description: Create an Security User
      operationId: createUsers
      requestBody:
        description: Contains the user object to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
          application/xml:
            schema:
              $ref: '#/components/schemas/UserDto'
      parameters:
        - in: header
          name: authToken
          example: 824ae010-4502-b281-3231-122e3a54c198
          description: Authentication Key for Authentication and Authorization. this
            Authentication key obtained using Login API
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
            application/xml:
              schema:
                $ref: "#/components/schemas/Response"
        "400":
          description: Request Failed
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    put:
      tags:
        - User
      summary: Update security users.
      description: Update an Security User
      operationId: updateUsers
      requestBody:
        description: Contains the user object to update.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
          application/xml:
            schema:
              $ref: '#/components/schemas/UserDto'
      parameters:
        - in: header
          name: authToken
          example: 824ae010-4502-b281-3231-122e3a54c198
          description: Authentication Key for Authentication and Authorization. this
            Authentication key obtained using Login API
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
            application/xml:
              schema:
                $ref: "#/components/schemas/Response"
        "400":
          description: Request Failed
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
    delete:
      tags:
        - User
      summary: Delete security users.
      description: delete an Security User
      operationId: deleteUsers
      parameters:
        - in: header
          name: authToken
          example: 824ae010-4502-b281-3231-122e3a54c198
          description: Authentication Key for Authentication and Authorization. this
            Authentication key obtained using Login API
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: userId
          example: 824ae010-4502-b281-3231-122e3a54c198
          description: Id of the user to fetch.
          required: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
            application/xml:
              schema:
                $ref: "#/components/schemas/Response"
        "400":
          description: Request Failed
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /auditlog:
    get:
      tags:
        - Auditlog
      summary: View audit logs.
      description: View audit logs.
      operationId: getAuditLogs
      parameters:
        - in: header
          name: authToken
          example: 824ae010-4502-b281-3231-122e3a54c198
          description: Authentication Key for Authentication and Authorization. this
            Authentication key obtained using Login API
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: auditlogId
          example: 824ae010-4502-b281-3231-122e3a54c198
          description: Id of the auditlog  to fetch.
          required: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Auditlog(s) retrived successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
            application/xml:
              schema:
                $ref: "#/components/schemas/Response"
        "400":
          description: Request Failed
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
components:
  schemas:
    Response:
      type: object
      properties:
        object:
          type: object
          description: Model object as a response
        message:
          type: string
          description: Response message
        status:
          $ref: "#/components/schemas/ResponseStatus"
    ResponseStatus:
      type: string
      enum:
        - Success
        - Failure
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: sysadmin
          description: Login username of the user.
        password:
          type: string
          example: sysadmin
          description: Password of the user.
    LoginResponse:
      type: object
      required:
        - authToken
        - isChangePassword
        - user
      properties:
        authToken:
          type: string
          format: uuid
          example: 3c4ad220-f260-3988-b569-e0629e290599
          description: Created session token.
        isChangePassword:
          type: boolean
          example: true
          description: Is checnge is password required.
        user:
          $ref: "#/components/schemas/UserDto"
    UserDto:
      type: object
      required:
        - username
        - password
        - firstName
        - lastName
        - email
      properties:
        id:
          type: string
          format: uuid
          example: 3c4ad220-f260-3988-b569-e0629e290599
          description: This is auto generated value. Should be used only during update,
            should not be used during create.
        username:
          type: string
          example: sysadmin
          description: Login username of the user.
        password:
          type: string
          example: sysadmin
          description: Password of an User.
        firstName:
          type: string
          example: system
          description: Firstname of an User
        lastName:
          type: string
          example: user
          description: Lastname of an User
        email:
          type: string
          format: email
          example: sysadmin@abc.com
          description: Email Id of the user. 
        accountStatus:
          $ref: "#/components/schemas/UserAccountStatus"
        accountExpiry:
          type: integer
          format: int32
          example: 60
          description: Account Expiry days from creation.
        passwordExpiry:
          type: integer
          format: int32
          example: 60
          description: Password Expiry days from creation.
        idleTimeout:
          type: integer
          format: int32
          example: 15
          description: GUI Idle timeout.
    UserAccountStatus:
      type: string
      enum:
        - Active
        - Locked
        - Blocked
        - Account Expired
        - Password Expired
        - Dormancy Period Exceeded
        - Change Password on Login
    AuditLogType:
      type: string
      enum:
        - System
        - Create
        - Update
        - Delete
        - Login
        - Logout
    AuditLogModules:
      type: string
      enum:
        - Security
        - User
        - System Settings
    UserRoleEnum:
      type: string
      enum:
        - DEFAULT
        - USER_READ
        - USER_EDIT
        - USER_CREATE
        - USER_DELETE
        - AUDITLOG_READ
        - PURGE_AUDITLOG
        - GLOBAL_SETTINGS_READ
        - GLOBAL_SETTINGS_EDIT
