2020-02-17 15:54:38 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "DROP TABLE GROUP[*] IF EXISTS"; expected "identifier"; SQL statement:
drop table group if exists [42001-200]
2020-02-17 15:54:38 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE GROUP[*] (ID BINARY NOT NULL, CREATED_BY VARCHAR(255), CREATED_TIME BIGINT, LAST_UPDATED_BY VARCHAR(255), LAST_UPDATED_TIME BIGINT, VERSION INTEGER, DESCRIPTION VARCHAR(255), IS_DEFAULT BOOLEAN, NAME VARCHAR(255), PRIMARY KEY (ID))"; expected "identifier"; SQL statement:
create table group (id binary not null, created_by varchar(255), created_time bigint, last_updated_by varchar(255), last_updated_time bigint, version integer, description varchar(255), is_default boolean, name varchar(255), primary key (id)) [42001-200]
2020-02-17 15:54:38 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE GROUP_ROLE (ID BINARY NOT NULL, CREATED_BY VARCHAR(255), CREATED_TIME BIGINT, LAST_UPDATED_BY VARCHAR(255), LAST_UPDATED_TIME BIGINT, VERSION INTEGER, GROUP[*] BINARY(255), ROLE BINARY(255), PRIMARY KEY (ID))"; expected "identifier"; SQL statement:
create table group_role (id binary not null, created_by varchar(255), created_time bigint, last_updated_by varchar(255), last_updated_time bigint, version integer, group binary(255), role binary(255), primary key (id)) [42001-200]
2020-02-17 15:54:38 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "USER_ROLE" not found; SQL statement:
INSERT INTO user_role ( id, version, created_time, last_updated_time, created_by, last_updated_by, name, description ) VALUES ( RANDOM_UUID(), 1, ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), 'admin', 'admin', 'USER_READ', '' ) [42102-200]
2020-02-17 15:57:11 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "DROP TABLE GROUP[*] IF EXISTS"; expected "identifier"; SQL statement:
drop table group if exists [42001-200]
2020-02-17 15:57:11 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE GROUP[*] (ID BINARY NOT NULL, CREATED_BY VARCHAR(255), CREATED_TIME BIGINT, LAST_UPDATED_BY VARCHAR(255), LAST_UPDATED_TIME BIGINT, VERSION INTEGER, DESCRIPTION VARCHAR(255), IS_DEFAULT BOOLEAN, NAME VARCHAR(255), PRIMARY KEY (ID))"; expected "identifier"; SQL statement:
create table group (id binary not null, created_by varchar(255), created_time bigint, last_updated_by varchar(255), last_updated_time bigint, version integer, description varchar(255), is_default boolean, name varchar(255), primary key (id)) [42001-200]
2020-02-17 15:57:11 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE GROUP_ROLE (ID BINARY NOT NULL, CREATED_BY VARCHAR(255), CREATED_TIME BIGINT, LAST_UPDATED_BY VARCHAR(255), LAST_UPDATED_TIME BIGINT, VERSION INTEGER, GROUP[*] BINARY(255), ROLE BINARY(255), PRIMARY KEY (ID))"; expected "identifier"; SQL statement:
create table group_role (id binary not null, created_by varchar(255), created_time bigint, last_updated_by varchar(255), last_updated_time bigint, version integer, group binary(255), role binary(255), primary key (id)) [42001-200]
2020-02-17 15:57:11 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO GROUP[*] ( ID, VERSION, CREATED_TIME, LAST_UPDATED_TIME, NAME, IS_DEFAULT, DESCRIPTION ) VALUES ( RANDOM_UUID(), 1, ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), 'Administrator', TRUE, '' )"; expected "identifier"; SQL statement:
INSERT INTO group ( id, version, created_time, last_updated_time, name, is_default, description ) VALUES ( RANDOM_UUID(), 1, ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), 'Administrator', TRUE, '' ) [42001-200]
2020-02-17 15:57:37 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "DROP TABLE GROUP[*] IF EXISTS"; expected "identifier"; SQL statement:
drop table group if exists [42001-200]
2020-02-17 15:57:37 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE GROUP[*] (ID BINARY NOT NULL, CREATED_BY VARCHAR(255), CREATED_TIME BIGINT, LAST_UPDATED_BY VARCHAR(255), LAST_UPDATED_TIME BIGINT, VERSION INTEGER, DESCRIPTION VARCHAR(255), IS_DEFAULT BOOLEAN, NAME VARCHAR(255), PRIMARY KEY (ID))"; expected "identifier"; SQL statement:
create table group (id binary not null, created_by varchar(255), created_time bigint, last_updated_by varchar(255), last_updated_time bigint, version integer, description varchar(255), is_default boolean, name varchar(255), primary key (id)) [42001-200]
2020-02-17 15:57:37 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE GROUP_ROLE (ID BINARY NOT NULL, CREATED_BY VARCHAR(255), CREATED_TIME BIGINT, LAST_UPDATED_BY VARCHAR(255), LAST_UPDATED_TIME BIGINT, VERSION INTEGER, GROUP[*] BINARY(255), ROLE BINARY(255), PRIMARY KEY (ID))"; expected "identifier"; SQL statement:
create table group_role (id binary not null, created_by varchar(255), created_time bigint, last_updated_by varchar(255), last_updated_time bigint, version integer, group binary(255), role binary(255), primary key (id)) [42001-200]
2020-02-17 15:57:37 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO GROUP[*] ( ID, VERSION, CREATED_TIME, LAST_UPDATED_TIME, NAME, IS_DEFAULT, DESCRIPTION ) VALUES ( RANDOM_UUID(), 1, ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), 'Administrator', TRUE, '' )"; expected "identifier"; SQL statement:
INSERT INTO group ( id, version, created_time, last_updated_time, name, is_default, description ) VALUES ( RANDOM_UUID(), 1, ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), 'Administrator', TRUE, '' ) [42001-200]
2020-02-17 16:00:31 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO GROUP_ROLE ( ID, VERSION, CREATED_TIME, LAST_UPDATED_TIME, CREATED_BY, LAST_UPDATED_BY, GROUP[*], ROLE ) VALUES ( RANDOM_UUID(), 1, ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), 'admin', 'admin', ( SELECT ID FROM GROUP WHERE NAME='Administrator' ), ( SELECT ID FROM ROLE WHERE NAME='USER_READ' ) )"; expected "identifier"; SQL statement:
INSERT INTO group_role ( id, version, created_time, last_updated_time, created_by, last_updated_by, group, role ) VALUES ( RANDOM_UUID(), 1, ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), 'admin', 'admin', ( SELECT id FROM group where name='Administrator' ), ( SELECT id FROM role where name='USER_READ' ) ) [42001-200]
2020-02-17 16:01:23 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO GROUP_ROLE ( ID, VERSION, CREATED_TIME, LAST_UPDATED_TIME, CREATED_BY, LAST_UPDATED_BY, GROUP[*], ROLE ) VALUES ( RANDOM_UUID(), 1, ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), 'admin', 'admin', ( SELECT ID FROM GROUP WHERE NAME='Administrator' ), ( SELECT ID FROM ROLE WHERE NAME='USER_READ' ) )"; expected "identifier"; SQL statement:
INSERT INTO group_role ( id, version, created_time, last_updated_time, created_by, last_updated_by, group, role ) VALUES ( RANDOM_UUID(), 1, ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), 'admin', 'admin', ( SELECT id FROM group where name='Administrator' ), ( SELECT id FROM role where name='USER_READ' ) ) [42001-200]
2020-02-17 16:02:35 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO GROUP_ROLE ( ID, VERSION, CREATED_TIME, LAST_UPDATED_TIME, CREATED_BY, LAST_UPDATED_BY, GROUP[*], ROLE ) VALUES ( RANDOM_UUID(), 1, ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), 'admin', 'admin', ( SELECT ID FROM GROUP WHERE NAME='Administrator' ), ( SELECT ID FROM ROLE WHERE NAME='USER_READ' ) )"; expected "identifier"; SQL statement:
INSERT INTO group_role ( id, version, created_time, last_updated_time, created_by, last_updated_by, group, role ) VALUES ( RANDOM_UUID(), 1, ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), 'admin', 'admin', ( SELECT id FROM group where name='Administrator' ), ( SELECT id FROM role where name='USER_READ' ) ) [42001-200]
2020-02-17 16:03:30 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO GROUP_ROLE ( ID, VERSION, CREATED_TIME, LAST_UPDATED_TIME, CREATED_BY, LAST_UPDATED_BY, USER_GROUP, USER_ROLE ) VALUES ( RANDOM_UUID(), 1, ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), 'admin', 'admin', ( SELECT ID FROM GROUP[*] WHERE NAME='Administrator' ), ( SELECT ID FROM ROLE WHERE NAME='USER_READ' ) )"; expected "identifier"; SQL statement:
INSERT INTO group_role ( id, version, created_time, last_updated_time, created_by, last_updated_by, user_group, user_role ) VALUES ( RANDOM_UUID(), 1, ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), ( DATEDIFF('SECOND', DATE '1970-01-01', CURRENT_TIMESTAMP()) * 1000 - 19800000 ), 'admin', 'admin', ( SELECT id FROM group where name='Administrator' ), ( SELECT id FROM role where name='USER_READ' ) ) [42001-200]
2020-02-17 16:04:41 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:622)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.message.DbException.get(DbException.java:170)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1514)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1490)
	at org.h2.jdbc.JdbcConnection.getAutoCommit(JdbcConnection.java:516)
	at com.zaxxer.hikari.pool.HikariProxyConnection.getAutoCommit(HikariProxyConnection.java)
	at org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl.getIsolatedConnection(DdlTransactionIsolatorNonJtaImpl.java:46)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.jdbcStatement(GenerationTargetToDatabase.java:77)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:53)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl$DelayedDropActionImpl.perform(SchemaDropperImpl.java:536)
	at org.hibernate.internal.SessionFactoryImpl.close(SessionFactoryImpl.java:833)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.invokeProxyMethod(AbstractEntityManagerFactoryBean.java:497)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean$ManagedEntityManagerFactoryInvocationHandler.invoke(AbstractEntityManagerFactoryBean.java:680)
	at com.sun.proxy.$Proxy89.close(Unknown Source)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.destroy(AbstractEntityManagerFactoryBean.java:600)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
2020-02-17 16:04:41 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:622)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.message.DbException.get(DbException.java:170)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1514)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1490)
	at org.h2.jdbc.JdbcConnection.clearWarnings(JdbcConnection.java:703)
	at com.zaxxer.hikari.pool.ProxyConnection.close(ProxyConnection.java:246)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.closeConnection(DatasourceConnectionProviderImpl.java:127)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.releaseConnection(JdbcEnvironmentInitiator.java:185)
	at org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl.release(DdlTransactionIsolatorNonJtaImpl.java:83)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.release(GenerationTargetToDatabase.java:99)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl$DelayedDropActionImpl.perform(SchemaDropperImpl.java:547)
	at org.hibernate.internal.SessionFactoryImpl.close(SessionFactoryImpl.java:833)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.invokeProxyMethod(AbstractEntityManagerFactoryBean.java:497)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean$ManagedEntityManagerFactoryInvocationHandler.invoke(AbstractEntityManagerFactoryBean.java:680)
	at com.sun.proxy.$Proxy89.close(Unknown Source)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.destroy(AbstractEntityManagerFactoryBean.java:600)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948)
